// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using TClassificacaoTributaria;
//
//    var classificacaoTributaria = ClassificacaoTributaria.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace TClassificacaoTributaria;

using System;
using System.Collections.Generic;

using System.Text.Json;
using System.Text.Json.Serialization;
using System.Globalization;

public partial class ClassificacaoTributariaModel
{
        [JsonPropertyName("Código da Situação Tributária")]
        public string CódigoDaSituaçãoTributária { get; set; }

        [JsonPropertyName("Descrição do Código da Situação Tributária")]
        public string DescriçãoDoCódigoDaSituaçãoTributária { get; set; }

        [JsonPropertyName("Exige Tributação")]
        public string ExigeTributação { get; set; }

        [JsonPropertyName("Redução BC CST")]
        public string ReduçãoBcCst { get; set; }

        [JsonPropertyName("Redução Alíquota")]
        public string ReduçãoAlíquota { get; set; }

        [JsonPropertyName("Transferência Crédito")]
        public string TransferênciaCrédito { get; set; }

        [JsonPropertyName("Diferimento")]
        public string Diferimento { get; set; }

        [JsonPropertyName("Monofásica")]
        public string Monofásica { get; set; }

        [JsonPropertyName("Código da Classificação Tributária")]
        public string CódigoDaClassificaçãoTributária { get; set; }

        [JsonPropertyName("Descrição do Código da Classificação Tributária")]
        public string DescriçãoDoCódigoDaClassificaçãoTributária { get; set; }

        [JsonPropertyName("Nome da Classificação Tributária")]
        public string NomeDaClassificaçãoTributária { get; set; }

        [JsonPropertyName("Redação LC 214/2025")]
        public string RedaçãoLc2142025 { get; set; }

        [JsonPropertyName("Artigo LC 214/2025")]
        public string ArtigoLc2142025 { get; set; }

        [JsonPropertyName("Tipo de Alíquota")]
        public string TipoDeAlíquota { get; set; }

        [JsonPropertyName("Percentual Redução IBS")]
        public decimal PercentualReduçãoIbs { get; set; }

        [JsonPropertyName("Percentual Redução CBS")]
        public decimal PercentualReduçãoCbs { get; set; }

        [JsonPropertyName("Redução BC")]
        public string ReduçãoBc { get; set; }

        [JsonPropertyName("Tributação Regular")]
        public string TributaçãoRegular { get; set; }

        [JsonPropertyName("Crédito Presumido")]
        public string CréditoPresumido { get; set; }

        [JsonPropertyName("Crédito Para")]
        public string CréditoPara { get; set; }

        [JsonPropertyName("Indicador Redutor BC")]
        public string IndicadorRedutorBc { get; set; }

        [JsonPropertyName("Indicador Monofásica Padrão")]
        public string IndicadorMonofásicaPadrão { get; set; }

        [JsonPropertyName("Indicador Monofásica Retenção")]
        public string IndicadorMonofásicaRetenção { get; set; }

        [JsonPropertyName("Indicador Monofásica Retido")]
        public string IndicadorMonofásicaRetido { get; set; }

        [JsonPropertyName("Indicador Monofásica Diferimento")]
        public string IndicadorMonofásicaDiferimento { get; set; }

        [JsonPropertyName("Indicador Estorno Crédito")]
        public string IndicadorEstornoCrédito { get; set; }

        [JsonPropertyName("Indicador Crédito Presumido ZFM")]
        public string IndicadorCréditoPresumidoZfm { get; set; }

        [JsonPropertyName("Indicador Ajuste Competência")]
        public string IndicadorAjusteCompetência { get; set; }

        [JsonPropertyName("Data Início Vigência")]
        public string DataInícioVigência { get; set; }

        [JsonPropertyName("Data Fim Vigência")]
        public string DataFimVigência { get; set; }

        [JsonPropertyName("Data Atualização")]
        public string DataAtualização { get; set; }

        [JsonPropertyName("Anexo")]
        public string Anexo { get; set; }

        [JsonPropertyName("Link Legislação")]
        public string LinkLegislação { get; set; }

        [JsonPropertyName("Aplica NFe ABI")]
        public string AplicaNFeAbi { get; set; }

        [JsonPropertyName("Aplica NFe")]
        public string AplicaNFe { get; set; }

        [JsonPropertyName("Aplica NFCe")]
        public string AplicaNfCe { get; set; }

        [JsonPropertyName("Aplica CTe")]
        public string AplicaCTe { get; set; }

        [JsonPropertyName("Aplica CTeOS")]
        public string AplicaCTeOs { get; set; }

        [JsonPropertyName("Aplica BPe")]
        public string AplicaBPe { get; set; }

        [JsonPropertyName("Aplica BPe Transporte Aéreo")]
        public string AplicaBPeTransporteAéreo { get; set; }

        [JsonPropertyName("Aplica BPe Transporte Marítimo")]
        public string AplicaBPeTransporteMarítimo { get; set; }

        [JsonPropertyName("Aplica NF3e")]
        public string AplicaNf3E { get; set; }

        [JsonPropertyName("Aplica NFSe")]
        public string AplicaNfSe { get; set; }

        [JsonPropertyName("Aplica NFSe Via")]
        public string AplicaNfSeVia { get; set; }

        [JsonPropertyName("Aplica NFCom")]
        public string AplicaNfCom { get; set; }

        [JsonPropertyName("Aplica NFAg")]
        public string AplicaNfAg { get; set; }

        [JsonPropertyName("Aplica NFGas")]
        public string AplicaNfGas { get; set; }

        [JsonPropertyName("Aplica DERE")]
        public string AplicaDere { get; set; }
}

public partial class ClassificacaoTributaria
{
        public static List<ClassificacaoTributaria> FromJson(string json) => JsonSerializer.Deserialize<List<ClassificacaoTributaria>>(json, TClassificacaoTributaria.Converter.Settings);
}

public static class Serialize
{
        public static string ToJson(this List<ClassificacaoTributaria> self) => JsonSerializer.Serialize(self, TClassificacaoTributaria.Converter.Settings);
}

internal static class Converter
{
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
                Converters =
                {
                        new DateOnlyConverter(),
                        new TimeOnlyConverter(),
                        IsoDateTimeOffsetConverter.Singleton
                },
        };
}
    
public class DateOnlyConverter : JsonConverter<DateOnly>
{
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
                this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                var value = reader.GetString();
                return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
}

public class TimeOnlyConverter : JsonConverter<TimeOnly>
{
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
                this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                var value = reader.GetString();
                return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
}

internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
{
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
                get => _dateTimeStyles;
                set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
                get => _dateTimeFormat ?? string.Empty;
                set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
                get => _culture ?? CultureInfo.CurrentCulture;
                set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
                string text;


                if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                    || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
                {
                        value = value.ToUniversalTime();
                }

                text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

                writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                string? dateText = reader.GetString();

                if (string.IsNullOrEmpty(dateText) == false)
                {
                        if (!string.IsNullOrEmpty(_dateTimeFormat))
                        {
                                return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                        }
                        else
                        {
                                return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                        }
                }
                else
                {
                        return default(DateTimeOffset);
                }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
